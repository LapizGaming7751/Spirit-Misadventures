[gd_scene load_steps=15 format=3 uid="uid://cdppan6umw1pc"]

[ext_resource type="Texture2D" uid="uid://ckgc2qmosqix8" path="res://icon.png" id="1_guhmw"]
[ext_resource type="Script" path="res://scripts/base/StateMachine.gd" id="2_piol8"]

[sub_resource type="GDScript" id="GDScript_b33ib"]
script/source = "extends CharacterBody2D
class_name CombatOld

# Vars
@export var baseSpeed : float = 11.5
@export var maxHP : float = 1500
enum face{LEFT=-1,RIGHT=1}
@export var looking : face
@export var lastDir : face
var maxConfidence : float = 100.0
var confidence : float = 50.0
var hurt : float
var knockbackTaken : Vector2
var damageTaken : float
const GRAVITY = 1250

# Onreadies
@onready var Anims = $Anims
@onready var State = $StateMachine
@onready var CheatTimer = $ConfidenceRegen
@onready var DoubleTap = $DoubleTap
var DTActive : bool

# Stats
var jumpStr : float = 14.5
var dir : Vector2
var curHP : float = maxHP

func _ready():
	looking = face.RIGHT
	lastDir = face.RIGHT

func control():
	dir.x = Input.get_axis(\"left\",\"right\")
	if dir.x != 0:
		lastDir = int(dir.x)
	dir.y = -Input.get_action_strength(\"jump\")

func is_anything_just_released():
	for action in InputMap.get_actions():
		if Input.is_action_just_released(action):
			return true
	return false

func _physics_process(delta):
	control()
	
	if confidence > maxConfidence:
		confidence = maxConfidence
	if confidence <= 0.0:
		confidence = 0.0
		State.transit(\"ConfBreak\")
	
	$Health.text = str(curHP)
	if is_anything_just_released():
		DoubleTap.start()
		print(\"Listening for DT\")
	if DoubleTap.time_left > 0:
		DTActive = true
	else:
		DTActive = false
	move_and_slide()

func _on_confidence_regen_timeout():
	print(str(get_name())+\": \"+str(confidence))

func take_damage(damage : float, knockback : Vector2, hurtTime : float):
	hurt = hurtTime
	knockbackTaken = knockback
	damageTaken = damage
	if !State.isCurrentState(\"SpotDodge\") or !State.isCurrentState(\"Dash\"):
		print(str(get_name())+\": Took \"+str(damage)+\" damage!\")
		if !State.isCurrentState(\"Parry\") and !State.isCurrentState(\"Block\"):
			State.transit(\"Hurt\")
			print(State.currentState)
		else:
			print(str(get_name())+\": Defended the attack. Took \"+str(damage * 0.8)+\" damage!\")
	else:
		print(str(get_name())+\": Dodged the attack!\")
"

[sub_resource type="SpriteFrames" id="SpriteFrames_5ghi5"]
animations = [{
"frames": [{
"duration": 1.0,
"texture": ExtResource("1_guhmw")
}, {
"duration": 1.0,
"texture": ExtResource("1_guhmw")
}, {
"duration": 1.0,
"texture": ExtResource("1_guhmw")
}, {
"duration": 1.0,
"texture": ExtResource("1_guhmw")
}, {
"duration": 1.0,
"texture": ExtResource("1_guhmw")
}, {
"duration": 1.0,
"texture": ExtResource("1_guhmw")
}, {
"duration": 1.0,
"texture": ExtResource("1_guhmw")
}],
"loop": false,
"name": &"SkillA",
"speed": 24.0
}, {
"frames": [{
"duration": 1.0,
"texture": ExtResource("1_guhmw")
}, {
"duration": 1.0,
"texture": ExtResource("1_guhmw")
}, {
"duration": 1.0,
"texture": ExtResource("1_guhmw")
}, {
"duration": 1.0,
"texture": ExtResource("1_guhmw")
}, {
"duration": 1.0,
"texture": ExtResource("1_guhmw")
}],
"loop": false,
"name": &"dashing",
"speed": 24.0
}, {
"frames": [{
"duration": 1.0,
"texture": ExtResource("1_guhmw")
}],
"loop": true,
"name": &"default",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": ExtResource("1_guhmw")
}, {
"duration": 1.0,
"texture": ExtResource("1_guhmw")
}],
"loop": true,
"name": &"hurt",
"speed": 24.0
}, {
"frames": [{
"duration": 1.0,
"texture": ExtResource("1_guhmw")
}, {
"duration": 1.0,
"texture": ExtResource("1_guhmw")
}, {
"duration": 1.0,
"texture": ExtResource("1_guhmw")
}, {
"duration": 1.0,
"texture": ExtResource("1_guhmw")
}],
"loop": false,
"name": &"turnaround",
"speed": 24.0
}]

[sub_resource type="CapsuleShape2D" id="1"]
radius = 31.0
height = 62.0

[sub_resource type="GDScript" id="GDScript_lx52s"]
script/source = "extends State

func Enter():
	if Player.confidence >= 20:
		Player.confidence -= 20
		print(Player.name+\": Enough confidence. Dodging\")
	else:
		print(Player.name+\": Not enough confidence. Spot Dodge not registered\")
		if !Player.is_on_floor():
			parent.transit(\"Air\")
		elif Player.dir.x != 0:
			parent.transit(\"Moving\")
		elif Input.is_action_pressed(\"down\"):
			parent.transit(\"Crouch\")
		else:
			parent.transit(\"Idle\")

func PhysicsUpdate(delta):
	Player.Anims.play(\"dashing\")
	Player.dir.x = 0
	
	if Player.Anims.frame == 4:
		Player.Anims.play(\"default\")
		Player.velocity.x = ((Player.dir.x * Player.baseSpeed) * 1000) * delta
		if !Player.is_on_floor():
			parent.transit(\"Air\")
		elif Player.dir.x != 0:
			parent.transit(\"Moving\")
		elif Input.is_action_pressed(\"down\"):
			parent.transit(\"Crouch\")
		else:
			parent.transit(\"Idle\")

func Exit():
	if Player.damageTaken > 0.0:
		Player.confidence += Player.damageTaken / 10
		Player.damageTaken = 0.0
"

[sub_resource type="GDScript" id="GDScript_5sk8o"]
script/source = "extends State

func Enter():
	if Player.looking != Player.lastDir:
		Player.looking = Player.lastDir
		print(Player.name+\": Turned player around. Now facing \"+str(Player.looking))
	else:
		print(Player.name+\": Did not turn player around. Same face as moving direction.\")
		parent.transit(\"Idle\")

func PhysicsUpdate(delta):
	Player.Anims.play(\"turnaround\")
	
	match Player.Anims.frame:
		3:
			parent.transit(\"Idle\")
"

[sub_resource type="GDScript" id="GDScript_mcrhw"]
script/source = "extends State

@export var parryUptime : float = 0.35
var parryTime : float

func Enter():
	parryTime = parryUptime

func PhysicsUpdate(delta):
	parryTime -= delta
	if parryTime >= 0.0 && Player.damageTaken > 0:
		Player.confidence += Player.damageTaken / 10
		if Input.is_action_pressed(\"block\"):
			Player.damageTaken = 0
			parent.transit(\"Block\")
		else:
			Player.damageTaken = 0
			parent.transit(\"Idle\")
	elif parryTime <= 0.0:
		Player.confidence -= 10
		if Input.is_action_pressed(\"block\"):
			parent.transit(\"Block\")
		else:
			parent.transit(\"Idle\")
"

[sub_resource type="GDScript" id="GDScript_xa06u"]
script/source = "extends State

func PhysicsUpdate(delta):
	if Player.damageTaken > 0:
		Player.confidence += Player.damageTaken / 15
		Player.curHP -= Player.damageTaken * 0.8
		Player.damageTaken = 0
	else:
		if Input.is_action_just_released(\"block\"):
			parent.transit(\"Idle\")
"

[sub_resource type="GDScript" id="GDScript_oj7l1"]
script/source = "extends State

var hurtTime : float
var knockbackTake : Vector2
var frameProg : float

func Enter():
	hurtTime = Player.hurt
	knockbackTake = Player.knockbackTaken
	
	Player.curHP -= Player.damageTaken
	if Player.curHP > Player.maxHP:
		Player.curHP = Player.maxHP
	elif Player.curHP < 0:
		Player.curHP = 0

func PhysicsUpdate(delta):
	Player.Anims.play(\"hurt\")
	hurtTime -= delta
	
	if hurtTime >= 0.0:
		Player.velocity = knockbackTake
		knockbackTake.x += knockbackTake.x * -clamp(hurtTime, 0.0, 0.5)
		knockbackTake.y += Player.GRAVITY * delta
	
	Player.hurt = hurtTime
	
	if hurtTime <= 0:
		Player.Anims.play(\"default\")
		Player.damageTaken = 0.0
		parent.transit(\"Idle\")
		print(\"I'm out of stun!\")
"

[sub_resource type="GDScript" id="GDScript_npgr6"]
script/source = "extends State

var breakTime : float
@export var breakUpTime : float = 5.0

func Enter():
	breakTime = breakUpTime

func PhysicsUpdate(delta):
	Player.Anims.play(\"hurt\")
	breakTime -= delta
	
	if breakTime >= 0.0:
		Player.velocity.x += Player.velocity.x * -clamp(breakTime, 0.0, 0.3)
		Player.velocity.y += Player.GRAVITY * delta
	if breakTime <= 0:
		Player.Anims.play(\"default\")
		parent.transit(\"Idle\")
		Player.confidence = Player.maxConfidence / 2
		print(\"I'm out of Confidence Break!\")
"

[sub_resource type="GDScript" id="GDScript_ar1xs"]
script/source = "extends State
"

[sub_resource type="GDScript" id="GDScript_wux08"]
script/source = "extends Area2D
class_name Hurtbox

var damage : float
var requiredConfidence : float
var returnsConfidence : float

@onready var Shape = $Shape
var active : bool
var hurtTime : float
var sentKnockback : Vector2

func _ready():
	hurtTime = get_parent().stunsFor
	damage = get_parent().damage
	requiredConfidence = get_parent().requiredConfidence
	returnsConfidence = get_parent().returnsConfidence

func _physics_process(delta):
	sentKnockback.x = get_parent().knockback.x * 1000 * get_parent().Player.looking * delta
	sentKnockback.y = get_parent().knockback.y * 1000 * delta
	self.scale.x = get_owner().looking
	if active:
		Shape.disabled = false
		Shape.visible = true
		position = get_owner().position
	else:
		Shape.disabled = true
		Shape.visible = false
	
	var hitting = get_overlapping_bodies()
	
	if hitting:
		for victim in hitting:
			if victim.is_in_group(\"Characters\") and victim != self.get_owner():
				var theoryHP = victim.curHP
				victim.take_damage(damage, sentKnockback, hurtTime)
				Shape.disabled=true
				if victim.curHP < theoryHP:
					get_owner().confidence += get_parent().returnsConfidence
				break
			else:
				print(\"ignored \"+ str(victim) +\" (Is either floor or self)\")
"

[sub_resource type="RectangleShape2D" id="RectangleShape2D_gvgsm"]
size = Vector2(130, 88)

[node name="BaseChar" type="CharacterBody2D" groups=["Characters"]]
script = SubResource("GDScript_b33ib")
looking = 1
lastDir = 1

[node name="Anims" type="AnimatedSprite2D" parent="."]
sprite_frames = SubResource("SpriteFrames_5ghi5")
animation = &"turnaround"
autoplay = "default"

[node name="Hitbox" type="CollisionShape2D" parent="."]
shape = SubResource("1")

[node name="StateMachine" type="Node" parent="."]
script = ExtResource("2_piol8")

[node name="Moving" type="Node" parent="StateMachine"]

[node name="Air" type="Node" parent="StateMachine"]

[node name="Crouch" type="Node" parent="StateMachine"]

[node name="Dash" type="Node" parent="StateMachine"]

[node name="SpotDodge" type="Node" parent="StateMachine"]
script = SubResource("GDScript_lx52s")

[node name="Turnaround" type="Node" parent="StateMachine"]
script = SubResource("GDScript_5sk8o")

[node name="Parry" type="Node" parent="StateMachine"]
script = SubResource("GDScript_mcrhw")

[node name="Block" type="Node" parent="StateMachine"]
script = SubResource("GDScript_xa06u")

[node name="Hurt" type="Node" parent="StateMachine"]
script = SubResource("GDScript_oj7l1")

[node name="ConfBreak" type="Node" parent="StateMachine"]
script = SubResource("GDScript_npgr6")

[node name="SkillA" type="Node" parent="StateMachine"]
script = SubResource("GDScript_ar1xs")

[node name="Hurtbox" type="Area2D" parent="StateMachine/SkillA"]
script = SubResource("GDScript_wux08")

[node name="Shape" type="CollisionShape2D" parent="StateMachine/SkillA/Hurtbox"]
position = Vector2(56, 0)
shape = SubResource("RectangleShape2D_gvgsm")
debug_color = Color(0.996078, 0, 0.152941, 0.419608)

[node name="Icon" type="Sprite2D" parent="StateMachine/SkillA/Hurtbox/Shape"]
position = Vector2(2.38419e-06, 0)
scale = Vector2(2.03125, 1.375)
texture = ExtResource("1_guhmw")

[node name="ConfidenceRegen" type="Timer" parent="."]
autostart = true

[node name="DoubleTap" type="Timer" parent="."]
wait_time = 0.15
one_shot = true

[connection signal="timeout" from="ConfidenceRegen" to="." method="_on_confidence_regen_timeout"]
